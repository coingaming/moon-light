[
  {
    "name": "Input",
    "props": [
      {
        "name": "size",
        "type": ["sm", "md", "lg"],
        "defaultState": "md",
        "description": "Input size"
      },
      {
        "name": "type",
        "type": [
          "date",
          "datetime-local",
          "email",
          "number",
          "password",
          "search",
          "tel",
          "text",
          "time",
          "url",
          "string"
        ],
        "defaultState": "text",
        "description": "Input type"
      },
      {
        "name": "placeholder",
        "type": ["string"],
        "description": "Placeholder for input"
      },
      {
        "name": "error",
        "type": ["boolean"],
        "defaultState": false,
        "description": "Sets error state for input"
      },
      {
        "name": "disabled",
        "type": ["boolean"],
        "defaultState": false,
        "description": "Set disabled/non-disabled"
      },
      {
        "name": "readOnly",
        "type": ["boolean"],
        "defaultState": false,
        "description": "Sets readonly state for input"
      },
      {
        "name": "dir",
        "type": ["ltr", "rtl", "auto"],
        "description": "RTL/LTR direction of label"
      },
      {
        "name": "className",
        "type": ["string"],
        "description": "CSS classes for customization"
      }
    ]
  },
  {
    "name": "FileInput",
    "props": [
      {
        "name": "accept",
        "type": ["string"],
        "description": "Accepted formats. It follows same <input type='file'> accept attribute. See Developer Mozilla docs input file #accept attribute for more information. e.g. image/*,video/*,.pdf",
        "defaultState": false
      },
      {
        "name": "maxFileSize",
        "type": ["number"],
        "description": "Max file size in Bytes",
        "defaultState": false
      },
      {
        "name": "onFileUpload",
        "type": ["(file: File) => void"],
        "description": "On File upload callback. It expects only one argument of type File.",
        "defaultState": false
      },
      {
        "name": "onFileRemove",
        "type": ["() => void"],
        "description": "On File remove callback",
        "defaultState": false
      },
      {
        "name": "initFile",
        "type": ["File"],
        "description": "Initial file to display on the input.",
        "defaultState": false
      },
      {
        "name": "errorMessages",
        "type": ["Errors"],
        "description": "Error messages to be displayed. 'maxFileSize' and 'type' only supported currently.",
        "defaultState": false
      }
    ]
  }
]
